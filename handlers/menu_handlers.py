from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import get_user_data, get_daily_intake, get_day_end_time, get_user_timezone
from database.food_log_db import update_daily_intake_for_user
from handlers.utils import get_main_menu, schedule_daily_summary_for_user
from handlers.log_handlers import show_food_log
import logging
import html

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        user_id = update.message.from_user.id
        reply_func = update.message.reply_text
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        reply_func = update.callback_query.edit_message_text
        await update.callback_query.answer()
    else:
        return ConversationHandler.END

    user_data = get_user_data(user_id)

    if user_data:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏–µ–º
        update_daily_intake_for_user(user_id)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
        await schedule_daily_summary_for_user(user_id, context)
        
        daily_calories, protein, fat, carbs = user_data
        intake = get_daily_intake(user_id)
        intake_calories, intake_protein, intake_fat, intake_carbs = intake
        
        daily_calories = daily_calories or 0
        protein = protein or 0
        fat = fat or 0
        carbs = carbs or 0
        intake_calories = intake_calories or 0
        intake_protein = intake_protein or 0
        intake_fat = intake_fat or 0
        intake_carbs = intake_carbs or 0
        
        percentage = (intake_calories / daily_calories) * 100 if daily_calories > 0 else 0
        
        html_message = (
            f"<b>–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n"
            f"<b>–ö–∞–ª–æ—Ä–∏–∏:</b> {intake_calories:.0f} / {daily_calories:.0f} –∫–∫–∞–ª ({percentage:.1f}%)\n"
            f"<b>–ë–µ–ª–∫–∏:</b> {intake_protein:.1f} / {protein:.1f}–≥\n"
            f"<b>–ñ–∏—Ä—ã:</b> {intake_fat:.1f} / {fat:.1f}–≥\n"
            f"<b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {intake_carbs:.1f} / {carbs:.1f}–≥"
        )
        
        await reply_func(
            html_message,
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞–Ω–∫–µ—Ç–æ–π
        welcome_message = (
            "–ü—Ä–∏–≤–µ—Ç!üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Nutro ‚Äî —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ –ø–∏—Ç–∞–Ω–∏—é —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.\n\n"
            "–ó–∞–ø–æ–ª–Ω–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É, –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω. –≠—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã! üöÄ"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await reply_func(welcome_message)
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã
        keyboard = [
            [InlineKeyboardButton("–ü–∞—Ä–µ–Ω—å", callback_data="–ü–∞—Ä–µ–Ω—å"), InlineKeyboardButton("–î–µ–≤—É—à–∫–∞", callback_data="–î–µ–≤—É—à–∫–∞")]
        ]
        await reply_func(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        from config import GENDER
        return GENDER
    return ConversationHandler.END

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —è–∑—ã–∫–µ –∏ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = query.from_user.id
    language = "üá∑üá∫ –†—É—Å—Å–∫–∏–π"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π, –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    subscription_status = "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ
    day_end_time = get_day_end_time(user_id)  # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è
    timezone = get_user_timezone(user_id)  # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = [
        [InlineKeyboardButton("üìù –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="update_profile"), 
         InlineKeyboardButton("üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –Ω–æ—Ä–º—É", callback_data="set_custom_macros")],
        [InlineKeyboardButton(f"‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è: {day_end_time}", callback_data="set_day_end_time"),
         InlineKeyboardButton(f"üåê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC{'+' if timezone >= 0 else ''}{timezone}", callback_data="change_timezone")],
        [InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="delete_data")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="home")]
    ]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    message = (
        f"<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
        f"–í–∞—à —è–∑—ã–∫: {language}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription_status}\n"
        f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è: {day_end_time}\n"
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC{'+' if timezone >= 0 else ''}{timezone}\n"
    )
    
    await query.edit_message_text(
        message, 
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )
    return ConversationHandler.END

async def subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.", reply_markup=get_main_menu())
    return ConversationHandler.END

async def home(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if update.callback_query:
            # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–ª–∞–≥–∏–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            try:
                await update.callback_query.answer()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å –≤ home: {e}")
        
        return await start(update, context)
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ home: {e}")
        if update.callback_query:
            try:
                await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                await update.callback_query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_main_menu()
                )
            except:
                pass
        return ConversationHandler.END