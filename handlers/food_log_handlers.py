async def show_food_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_day = get_current_day_for_user(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    await update_daily_intake_for_user(user_id, current_day)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    food_entries = get_food_entries_for_day(user_id, current_day)
    
    if not food_entries:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–∏—Ç–∞–Ω–∏—è
    message = "üçΩ –ò—Å—Ç–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    
    for entry in food_entries:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_str = entry['time'].strftime("%H:%M")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞
        food_name = entry['food_name']
        weight = int(entry['weight'])  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–µ—Å –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ö–ë–ñ–£ —Å –æ–¥–Ω–∏–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –∑–Ω–∞–∫–æ–º
        calories = int(entry['calories'])  # –û–∫—Ä—É–≥–ª—è–µ–º –∫–∞–ª–æ—Ä–∏–∏ –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
        protein = round(entry['protein'], 1)
        fat = round(entry['fat'], 1)
        carbs = round(entry['carbs'], 1)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º ID –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_id = entry['id']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message += f"üïõ {time_str} ‚Äî {food_name}, {weight}–≥\n"
        message += f"‚ö°Ô∏è {calories} –∫–∫–∞–ª ({protein}–ë / {fat}–ñ / {carbs}–£)\n"
        message += f"/edit_{edit_id}\n\n"
    
    await update.message.reply_text(message) 