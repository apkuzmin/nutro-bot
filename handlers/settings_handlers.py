from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import delete_user_data, get_user_data, save_custom_macros, get_day_end_time, set_day_end_time, get_user_timezone, set_user_timezone
from handlers.menu_handlers import start
from handlers.user_data_handlers import update
from handlers.utils import schedule_daily_summary_for_user
from config import CUSTOM_MACROS
import re
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
CALORIES, PROTEIN, FAT, CARBS = range(100, 104)
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DELETE_CONFIRM = 104
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è
DAY_END_TIME = 105
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–º–µ–Ω—ã —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
TIMEZONE_SETTINGS = 106

async def set_custom_macros(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ö–ë–ñ–£"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if user_data:
        daily_calories, protein, fat, carbs = user_data
        message = (
            "–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π –∏ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤.\n\n"
            f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {daily_calories:.0f} –∫–∫–∞–ª\n"
            f"–ë–µ–ª–∫–∏: {protein:.1f} –≥\n"
            f"–ñ–∏—Ä—ã: {fat:.1f} –≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f} –≥\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π (–∫–∫–∞–ª):"
        )
    else:
        message = "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π (–∫–∫–∞–ª):"
    
    await query.edit_message_text(message)
    return CALORIES

async def process_calories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞–ª–æ—Ä–∏–π"""
    try:
        calories = float(update.message.text)
        if 500 <= calories <= 10000:
            context.user_data["custom_calories"] = calories
            await update.message.reply_text(f"–ö–∞–ª–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {calories:.0f} –∫–∫–∞–ª\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–∞ (–≥):")
            return PROTEIN
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 500 –¥–æ 10000 –∫–∫–∞–ª.")
            return CALORIES
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return CALORIES

async def process_protein(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±–µ–ª–∫–∞"""
    try:
        protein = float(update.message.text)
        if 10 <= protein <= 500:
            context.user_data["custom_protein"] = protein
            await update.message.reply_text(f"–ë–µ–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {protein:.1f} –≥\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ (–≥):")
            return FAT
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 10 –¥–æ 500 –≥.")
            return PROTEIN
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return PROTEIN

async def process_fat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∂–∏—Ä–æ–≤"""
    try:
        fat = float(update.message.text)
        if 10 <= fat <= 500:
            context.user_data["custom_fat"] = fat
            await update.message.reply_text(f"–ñ–∏—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {fat:.1f} –≥\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–≥):")
            return CARBS
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 10 –¥–æ 500 –≥.")
            return FAT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return FAT

async def process_carbs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É–≥–ª–µ–≤–æ–¥–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        carbs = float(update.message.text)
        if 10 <= carbs <= 1000:
            context.user_data["custom_carbs"] = carbs
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            calories = context.user_data.get("custom_calories")
            protein = context.user_data.get("custom_protein")
            fat = context.user_data.get("custom_fat")
            
            user_id = update.message.from_user.id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            save_custom_macros(user_id, calories, protein, fat, carbs)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            message = (
                "‚úÖ –í–∞—à–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ö–ë–ñ–£ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n"
                f"–ö–∞–ª–æ—Ä–∏–∏: {calories:.0f} –∫–∫–∞–ª\n"
                f"–ë–µ–ª–∫–∏: {protein:.1f} –≥\n"
                f"–ñ–∏—Ä—ã: {fat:.1f} –≥\n"
                f"–£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f} –≥"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")]]
            
            await update.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for key in ["custom_calories", "custom_protein", "custom_fat", "custom_carbs"]:
                if key in context.user_data:
                    del context.user_data[key]
                    
            return ConversationHandler.END
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 10 –¥–æ 1000 –≥.")
            return CARBS
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return CARBS

async def change_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")]
    ]
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ConversationHandler.END

async def delete_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete"),
            InlineKeyboardButton("–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="settings")
        ]
    ]
    
    await query.edit_message_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    return DELETE_CONFIRM

async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    delete_user_data(user_id)
    
    keyboard = [[InlineKeyboardButton("‚¨Ö –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="home")]]
    
    await query.edit_message_text(
        "‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ConversationHandler.END

async def lang_ru(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    await query.edit_message_text(
        "‚úÖ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")]])
    )
    return ConversationHandler.END

async def set_day_end_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    current_time = get_day_end_time(user_id)
    
    await query.edit_message_text(
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è: {current_time}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:59).\n"
        "–í —ç—Ç–æ –≤—Ä–µ–º—è –±—É–¥—É—Ç –ø–æ–¥–≤–æ–¥–∏—Ç—å—Å—è –∏—Ç–æ–≥–∏ –¥–Ω—è –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–æ–≤—ã–π –¥–µ–Ω—å —É—á–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")]])
    )
    return DAY_END_TIME

async def process_day_end_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è"""
    user_id = update.message.from_user.id
    time_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)
    time_pattern = re.compile(r'^([01]?[0-9]|2[0-3]):([0-5][0-9])$')
    match = time_pattern.match(time_text)
    
    if match:
        hour = int(match.group(1))
        minute = int(match.group(2))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –≤–∏–¥–µ "–ß–ß:–ú–ú"
        formatted_time = f"{hour:02d}:{minute:02d}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è
        set_day_end_time(user_id, formatted_time)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
        await schedule_daily_summary_for_user(user_id, context)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —è–∑—ã–∫–µ –∏ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language = "üá∑üá∫ –†—É—Å—Å–∫–∏–π"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        subscription_status = "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ
        timezone = get_user_timezone(user_id)  # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = [
            [InlineKeyboardButton("üìù –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="update_profile"), 
             InlineKeyboardButton("üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ—Ä–º—É", callback_data="set_custom_macros")],
            [InlineKeyboardButton(f"‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è: {formatted_time}", callback_data="set_day_end_time"),
             InlineKeyboardButton(f"üåê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC{'+' if timezone >= 0 else ''}{timezone}", callback_data="change_timezone")],
            [InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="delete_data")],
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="home")]
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings_message = (
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            f"–í–∞—à —è–∑—ã–∫: {language}\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription_status}\n"
            f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è: {formatted_time}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC{'+' if timezone >= 0 else ''}{timezone}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {formatted_time}",
            reply_markup=None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await update.message.reply_text(
            settings_message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:59).",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")]])
        )
        return DAY_END_TIME

async def change_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    current_timezone = get_user_timezone(user_id)
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ UTC
    now_utc = datetime.utcnow()
    current_hour_utc = now_utc.hour
    current_minute = now_utc.minute
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    time_to_tz = {}
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    for tz_offset in range(-12, 15):
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤ —ç—Ç–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        tz_hour = (current_hour_utc + tz_offset) % 24
        time_str = f"{tz_hour:02d}:{current_minute:02d}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
        if time_str in time_to_tz:
            time_to_tz[time_str].append(tz_offset)
        else:
            time_to_tz[time_str] = [tz_offset]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    row = []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –ª–æ–≥–∏—á–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    sorted_times = sorted(time_to_tz.keys(), key=lambda x: int(x.split(':')[0]))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    for time_str in sorted_times:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        tz_offset = time_to_tz[time_str][0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â–∏–π —Ä—è–¥ (—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –±–µ–∑ UTC)
        row.append(InlineKeyboardButton(time_str, callback_data=f"tz_{tz_offset}"))
        
        # –ï—Å–ª–∏ –≤ —Ä—è–¥—É —É–∂–µ 3 –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if len(row) == 3:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if row:
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="settings")])
    
    await query.edit_message_text(
        f"–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC{'+' if current_timezone >= 0 else ''}{current_timezone}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return TIMEZONE_SETTINGS

async def process_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ callback_data
    timezone = int(query.data.split('_')[1])
    user_id = query.from_user.id
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_timezone(user_id, timezone)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    from handlers.menu_handlers import settings
    return await settings(update, context) 