"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –µ–¥–æ–π –∏ –ø–æ–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
"""

import re
import logging
import random
import asyncio
import os
import json
import time
from functools import lru_cache
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ContextTypes, ConversationHandler
from config import TOKEN, DEEPSEEK_API_KEY, DEEPSEEK_API_URL, FOOD_NAME, FOOD_WEIGHT, ADMIN_ADD, ADMIN_KCAL, ADMIN_PROTEIN, ADMIN_FAT, ADMIN_CARBS, ADMIN_ID, EDIT_FOOD_WEIGHT
from database.products_db import get_product_data, save_product_data, search_products, add_product_alias, get_product_by_barcode, save_barcode_product
from database.food_log_db import log_food, delete_food_log, update_daily_intake_for_user
from database.users_db import get_user_data, get_daily_intake
from openai import OpenAI

logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SSL-–∫–ª—é—á–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ Permission denied –Ω–∞ C:\ssl-keys.log
os.environ['SSLKEYLOGFILE'] = ''

# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
@lru_cache(maxsize=1)
def get_openai_client():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç OpenAI —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ config.py.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
    return OpenAI(
        api_key=DEEPSEEK_API_KEY,
        base_url=DEEPSEEK_API_URL,
        timeout=30.0,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
        max_retries=3  # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    )

# –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
client = get_openai_client()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def call_ai_api(food_name, max_retries=3, retry_delay=2):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏."""
    for attempt in range(max_retries):
        try:
            response = client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": "Nutrition expert. Format: [corrected_name] | [calories] [proteins] [fats] [carbs]. No units. Fix typos."},
                    {"role": "user", "content": f"Nutrition per 100g of '{food_name}'? Format: name | calories proteins fats carbs. Only numbers, no g/kcal units."}
                ],
                stream=False
            )
            return response.choices[0].message.content
        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries} –≤—ã–∑–æ–≤–∞ API –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt < max_retries - 1:
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                wait_time = retry_delay * (2 ** attempt)
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(wait_time)
            else:
                logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–∑–æ–≤–∞ API –Ω–µ —É–¥–∞–ª–∏—Å—å: {e}")
                raise

async def add_food(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    try:
        logger.debug("Add food triggered")
        from handlers.utils import get_main_menu
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")]]
        await query.edit_message_text(
            "üîç <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–∞–ø–µ—á–µ–Ω–Ω–∞—è –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        return FOOD_NAME
    except Exception as e:
        logger.error(f"Error in add_food: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=get_main_menu())
        return ConversationHandler.END

async def food_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    food = update.message.text.lower()
    original_food = food  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["original_food"] = original_food  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data["food"] = food
    logger.debug(f"Food name entered: {food}")

    result = get_product_data(food)
    if result:
        kcal, protein, fat, carbs = result
        context.user_data["food_data"] = (kcal, protein, fat, carbs)
        from handlers.utils import get_main_menu
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")]]
        message = f"‚úÖ {food.capitalize()} ‚Äî {kcal:.0f} –∫–∫–∞–ª ({protein:.1f}–ë / {fat:.1f}–ñ / {carbs:.1f}–£) –Ω–∞ 100–≥\n–£–∫–∞–∂–∏ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö:"
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return FOOD_WEIGHT
    else:
        similar = search_products(food)
        logger.debug(f"Similar products found: {similar}")
        if similar:
            keyboard = [[InlineKeyboardButton(item, callback_data=f"select_{item}")] for item in similar]
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")])
            keyboard.insert(-1, [InlineKeyboardButton("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="calculate_custom")])
            await update.message.reply_text(
                f"üîç–ü–æ –∑–∞–ø—Ä–æ—Å—É '{food}' –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return FOOD_NAME
        else:
            await update.message.reply_text("‚úÖ –ù–µ –Ω–∞—à–ª–æ—Å—å –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —É–∂–µ —Å—á–∏—Ç–∞–µ—Ç. –°–µ–∫—É–Ω–¥—É!")
            try:
                response = await call_ai_api(food)
                logger.debug(f"DeepSeek response: {response}")

                # –ò—â–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è (kcal, g) –≤ –æ—Ç–≤–µ—Ç–µ
                pattern = r"(.+?)\s*\|\s*(\d+\.?\d*)(?:\s*kcal)?\s+(\d+\.?\d*)(?:\s*g)?\s+(\d+\.?\d*)(?:\s*g)?\s+(\d+\.?\d*)(?:\s*g)?"
                match = re.search(pattern, response)
                
                if match:
                    std_name = match.group(1).strip()
                    kcal = float(match.group(2))
                    protein = float(match.group(3))
                    fat = float(match.group(4))
                    carbs = float(match.group(5))
                    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è: –Ω–∞–∑–≤–∞–Ω–∏–µ='{std_name}', –∫–∫–∞–ª={kcal}, –±–µ–ª–∫–∏={protein}, –∂–∏—Ä—ã={fat}, —É–≥–ª–µ–≤–æ–¥—ã={carbs}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    was_corrected = std_name.lower() != food.lower()
                    
                    # –ï—Å–ª–∏ DeepSeek –≤–µ—Ä–Ω—É–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    if std_name and len(std_name) > 0:
                        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                        if was_corrected:
                            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                            logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (food_name): '{food}' -> '{std_name}'")
                            save_product_data(std_name, kcal, protein, fat, carbs)
                            add_product_alias(std_name, food)
                            food = std_name
                        else:
                            save_product_data(food, kcal, protein, fat, carbs)
                else:
                    # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —á–∏—Å–ª–∞ –≥–¥–µ —É–≥–æ–¥–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–æ—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
                    clean_text = re.sub(r'[^\d\.\s]', ' ', response)
                    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–µ
                    clean_text = re.sub(r'\s+', ' ', clean_text).strip()
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∏—Å–ª–∞
                    numbers = [float(n) for n in clean_text.split() if re.match(r'\d+\.?\d*', n)]
                    
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–æ–≤–Ω–æ 4 —á–∏—Å–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                    if len(numbers) >= 4:
                        kcal, protein, fat, carbs = numbers[:4]
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç DeepSeek: '{response}'")
                        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç DeepSeek")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                save_product_data(food, kcal, protein, fat, carbs)
                context.user_data["food"] = food  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context.user_data["food_data"] = (kcal, protein, fat, carbs)
                
                # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ
                if was_corrected and original_food != food:
                    logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{original_food}' -> '{food}'")
                    add_product_alias(food, original_food)
                
                from handlers.utils import get_main_menu
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")]]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                if was_corrected:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    display_name = food if is_cyrillic(food) else original_food.capitalize()
                    message = f"‚úÖ {display_name} ‚Äî {kcal:.0f} –∫–∫–∞–ª ({protein:.1f}–ë / {fat:.1f}–ñ / {carbs:.1f}–£) –Ω–∞ 100–≥\n–£–∫–∞–∂–∏ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö:"
                else:
                    message = f"‚úÖ {food.capitalize()} ‚Äî {kcal:.0f} –∫–∫–∞–ª ({protein:.1f}–ë / {fat:.1f}–ñ / {carbs:.1f}–£) –Ω–∞ 100–≥\n–£–∫–∞–∂–∏ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö:"
                
                await update.message.reply_text(
                    message,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return FOOD_WEIGHT
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ DeepSeek API: {e}")
                user_id = update.message.from_user.id
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")]]
                if user_id == ADMIN_ID:
                    keyboard.insert(0, [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç (–∞–¥–º–∏–Ω)", callback_data="admin_add")])
                await update.message.reply_text(
                    f"–ü—Ä–æ–¥—É–∫—Ç '{food}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—à–∏–±–∫–∞ API: {e}\n"
                    "–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ —Ç—ã –∞–¥–º–∏–Ω.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return FOOD_NAME

def is_cyrillic(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã."""
    return bool(re.search('[–∞-—è–ê-–Ø]', text))

async def food_name_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    logger.debug(f"Food name buttons triggered with callback_data: {query.data}")

    if query.data.startswith("select_"):
        food = query.data.replace("select_", "")
        context.user_data["food"] = food
        product_data = get_product_data(food)
        logger.debug(f"Selected food: {food}, product_data: {product_data}")
        if product_data is None:
            from handlers.utils import get_main_menu
            await query.edit_message_text(
                f"–û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç '{food}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END
        kcal, protein, fat, carbs = product_data
        context.user_data["food_data"] = (kcal, protein, fat, carbs)
        from handlers.utils import get_main_menu
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")]]
        message = f"‚úÖ {food.capitalize()} ‚Äî {kcal:.0f} –∫–∫–∞–ª ({protein:.1f}–ë / {fat:.1f}–ñ / {carbs:.1f}–£) –Ω–∞ 100–≥\n–£–∫–∞–∂–∏ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö:"
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return FOOD_WEIGHT
    elif query.data == "admin_add":
        user_id = query.from_user.id
        logger.debug(f"Admin add triggered: User ID = {user_id}, ADMIN_ID = {ADMIN_ID}")
        if user_id != ADMIN_ID:
            from handlers.utils import get_main_menu
            await query.edit_message_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã.", reply_markup=get_main_menu())
            return ConversationHandler.END
        food = context.user_data.get("food", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç")
        logger.debug(f"Admin adding product: {food}")
        await query.edit_message_text(f"–î–æ–±–∞–≤–ª—è–µ–º '{food}'. –£–∫–∞–∂–∏ –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –≥:")
        return ADMIN_KCAL
    elif query.data == "calculate_custom":
        food = context.user_data.get("food", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç")
        original_food = food  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        logger.debug(f"Calculating custom product with neural network: {food}")
        await query.edit_message_text(f"‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è '{food}'. –°–µ–∫—É–Ω–¥—É...")
        
        try:
            logger.debug(f"Sending request to DeepSeek API for food: {food}")
            response = await call_ai_api(food)
            logger.debug(f"DeepSeek response: {response}")

            # –ò—â–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è (kcal, g) –≤ –æ—Ç–≤–µ—Ç–µ
            pattern = r"(.+?)\s*\|\s*(\d+\.?\d*)(?:\s*kcal)?\s+(\d+\.?\d*)(?:\s*g)?\s+(\d+\.?\d*)(?:\s*g)?\s+(\d+\.?\d*)(?:\s*g)?"
            match = re.search(pattern, response)
            
            if match:
                std_name = match.group(1).strip()
                kcal = float(match.group(2))
                protein = float(match.group(3))
                fat = float(match.group(4))
                carbs = float(match.group(5))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                was_corrected = std_name.lower() != food.lower()
                
                # –ï—Å–ª–∏ DeepSeek –≤–µ—Ä–Ω—É–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if std_name and len(std_name) > 0:
                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    if was_corrected:
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                        logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (calculate_custom): '{food}' -> '{std_name}'")
                        save_product_data(std_name, kcal, protein, fat, carbs)
                        add_product_alias(std_name, food)
                        food = std_name
                    else:
                        save_product_data(food, kcal, protein, fat, carbs)
                else:
                    save_product_data(food, kcal, protein, fat, carbs)

            # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, –±—ã–ª–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
            was_corrected = original_food != food
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            save_product_data(food, kcal, protein, fat, carbs)
            context.user_data["food"] = food  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data["food_data"] = (kcal, protein, fat, carbs)
            
            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ
            if was_corrected and original_food != food:
                logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{original_food}' -> '{food}'")
                add_product_alias(food, original_food)
            
            from handlers.utils import get_main_menu
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")]]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            if was_corrected:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_name = food if is_cyrillic(food) else original_food.capitalize()
                message = f"‚úÖ {display_name} ‚Äî {kcal:.0f} –∫–∫–∞–ª ({protein:.1f}–ë / {fat:.1f}–ñ / {carbs:.1f}–£) –Ω–∞ 100–≥\n–£–∫–∞–∂–∏ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö:"
            else:
                message = f"‚úÖ {food.capitalize()} ‚Äî {kcal:.0f} –∫–∫–∞–ª ({protein:.1f}–ë / {fat:.1f}–ñ / {carbs:.1f}–£) –Ω–∞ 100–≥\n–£–∫–∞–∂–∏ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö:"
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return FOOD_WEIGHT
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ DeepSeek API: {e}")
            from handlers.utils import get_main_menu
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '{food}': {str(e)}"
            logger.error(error_message)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ API –∫–ª—é—á–∞ –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if "authentication" in str(e).lower() or "api key" in str(e).lower():
                error_message = f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            elif "timeout" in str(e).lower() or "connection" in str(e).lower():
                error_message = f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            await query.edit_message_text(
                error_message,
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END
    elif query.data == "food_log":
        from handlers.log_handlers import show_food_log
        await show_food_log(update, context)
        return ConversationHandler.END
    elif query.data.startswith("edit_weight_"):
        log_id = int(query.data.replace("edit_weight_", ""))
        context.user_data["edit_log_id"] = log_id
        await query.edit_message_text("–£–∫–∞–∂–∏ –Ω–æ–≤—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö:")
        return EDIT_FOOD_WEIGHT
    elif query.data.startswith("edit_"):
        log_id = int(query.data.replace("edit_", ""))
        context.user_data["edit_log_id"] = log_id
        await query.edit_message_text("–£–∫–∞–∂–∏ –Ω–æ–≤—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö:")
        return EDIT_FOOD_WEIGHT
    elif query.data.startswith("delete_"):
        try:
            log_id = int(query.data.replace("delete_", ""))
            user_id = query.from_user.id
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
            success, deleted_user_id, log_date = delete_food_log(log_id)
            
            if not success:
                from handlers.utils import get_main_menu
                await query.edit_message_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_main_menu()
                )
                return ConversationHandler.END
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
            update_daily_intake_for_user(deleted_user_id, log_date)
            
            await query.edit_message_text("–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω. –û–±–Ω–æ–≤–ª—è—é –∏—Å—Ç–æ—Ä–∏—é...")
            
            # –í—ã–∑—ã–≤–∞–µ–º show_food_log, –Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
            try:
                from handlers.log_handlers import show_food_log
                await show_food_log(update, context)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
                from handlers.utils import get_main_menu
                await query.edit_message_text(
                    "–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω. –ù–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.",
                    reply_markup=get_main_menu()
                )
            
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            from handlers.utils import get_main_menu
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=get_main_menu()
            )
            return ConversationHandler.END
    elif query.data == "home":
        from handlers.menu_handlers import start
        return await start(update, context)
    return FOOD_NAME

async def food_weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    try:
        weight = float(text)
        food = context.user_data["food"]
        kcal, protein, fat, carbs = context.user_data["food_data"]
        total_kcal = kcal * weight / 100
        total_protein = protein * weight / 100
        total_fat = fat * weight / 100
        total_carbs = carbs * weight / 100

        user_id = update.message.from_user.id
        log_food(user_id, food, weight)

        intake_calories, intake_protein, intake_fat, intake_carbs = get_daily_intake(user_id)
        norm_calories, norm_protein, norm_fat, norm_carbs = get_user_data(user_id)
        percentage = (intake_calories / norm_calories) * 100 if norm_calories > 0 else 0

        html_message = (
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {food} {weight:.0f}–≥ ‚Äî {total_kcal:.0f} –∫–∫–∞–ª ({total_protein:.1f}–ë / {total_fat:.1f}–ñ / {total_carbs:.1f}–£)\n\n"
            f"<b>–¢–≤–æ–π –¥–Ω–µ–≤–Ω–æ–π –∏—Ç–æ–≥:</b>\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {intake_calories:.0f} / {norm_calories:.0f} –∫–∫–∞–ª ({percentage:.1f}%)\n"
            f"–ë–µ–ª–∫–∏: {intake_protein:.1f} / {norm_protein:.1f}–≥\n"
            f"–ñ–∏—Ä—ã: {intake_fat:.1f} / {norm_fat:.1f}–≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {intake_carbs:.1f} / {norm_carbs:.1f}–≥"
        )
        from handlers.utils import get_main_menu
        await update.message.reply_text(
            html_message,
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        return ConversationHandler.END
    except ValueError:
        context.user_data["food"] = text.lower()
        logger.debug(f"Food name entered: {text}")
        return await food_name(update, context)

async def admin_kcal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        kcal = float(update.message.text)
        context.user_data["kcal"] = kcal
        await update.message.reply_text("–£–∫–∞–∂–∏ –±–µ–ª–∫–∏ –Ω–∞ 100 –≥:")
        return ADMIN_PROTEIN
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ 100 –≥?")
        return ADMIN_KCAL

async def admin_protein(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        protein = float(update.message.text)
        context.user_data["protein"] = protein
        await update.message.reply_text("–£–∫–∞–∂–∏ –∂–∏—Ä—ã –Ω–∞ 100 –≥:")
        return ADMIN_FAT
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ –±–µ–ª–∫–æ–≤ –Ω–∞ 100 –≥?")
        return ADMIN_PROTEIN

async def admin_fat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        fat = float(update.message.text)
        context.user_data["fat"] = fat
        await update.message.reply_text("–£–∫–∞–∂–∏ —É–≥–ª–µ–≤–æ–¥—ã –Ω–∞ 100 –≥:")
        return ADMIN_CARBS
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ –∂–∏—Ä–æ–≤ –Ω–∞ 100 –≥?")
        return ADMIN_FAT

async def admin_carbs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        carbs = float(update.message.text)
        food = context.user_data["food"]
        kcal = context.user_data["kcal"]
        protein = context.user_data["protein"]
        fat = context.user_data["fat"]

        save_product_data(food, kcal, protein, fat, carbs)

        message = f"‚úÖ {food.capitalize()} ‚Äî {kcal:.0f} –∫–∫–∞–ª ({protein:.1f}–ë / {fat:.1f}–ñ / {carbs:.1f}–£) –Ω–∞ 100–≥\n–£–∫–∞–∂–∏ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö:"
        await update.message.reply_text(message)
        context.user_data["food_data"] = (kcal, protein, fat, carbs)
        return FOOD_WEIGHT
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–∞ 100 –≥?")
        return ADMIN_CARBS

async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ)."""
    try:
        raw_data = update.message.web_app_data.data
        product_data = json.loads(raw_data)
        barcode = product_data["barcode"]
        food_name = product_data["name"]
        kcal = product_data["kcal"]
        protein = product_data["protein"]
        fat = product_data["fat"]
        carbs = product_data["carbs"]
        user_id = update.message.from_user.id

        existing_product = get_product_data(food_name)
        if not existing_product:
            save_product_data(food_name, kcal, protein, fat, carbs)
            save_barcode_product(barcode, food_name)
        else:
            save_barcode_product(barcode, food_name)

        weight = 100  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100–≥
        log_food(user_id, food_name, weight)
        
        intake_calories, intake_protein, intake_fat, intake_carbs = get_daily_intake(user_id)
        norm_calories, norm_protein, norm_fat, norm_carbs = get_user_data(user_id)
        percentage = (intake_calories / norm_calories) * 100 if norm_calories > 0 else 0

        html_message = (
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É {barcode}: {food_name} {weight:.0f}–≥ ‚Äî {kcal:.0f} –∫–∫–∞–ª "
            f"({protein:.1f}–ë / {fat:.1f}–ñ / {carbs:.1f}–£) –Ω–∞ 100–≥\n\n"
            f"<b>–¢–≤–æ–π –¥–Ω–µ–≤–Ω–æ–π –∏—Ç–æ–≥:</b>\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: {intake_calories:.0f} / {norm_calories:.0f} –∫–∫–∞–ª ({percentage:.1f}%)\n"
            f"–ë–µ–ª–∫–∏: {intake_protein:.1f} / {norm_protein:.1f}–≥\n"
            f"–ñ–∏—Ä—ã: {intake_fat:.1f} / {norm_fat:.1f}–≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: {intake_carbs:.1f} / {norm_carbs:.1f}–≥"
        )
        from handlers.utils import get_main_menu
        await update.message.reply_text(html_message, reply_markup=get_main_menu(), parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error processing web app data: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞: {e}")