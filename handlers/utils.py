from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import get_daily_intake, get_user_data, get_food_log, get_current_day, get_day_end_time
from database.food_log_db import update_daily_intake_for_user
from datetime import date, datetime, time
import logging

logger = logging.getLogger(__name__)

def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("ü•ó –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É", callback_data="add_food")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="food_log"),
         InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
         InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
    if 'filling_profile' in context.user_data:
        context.user_data['filling_profile'] = False
        
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
    return ConversationHandler.END

async def send_daily_summary(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    from database import conn
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT user_id FROM users")
    user_ids = [row[0] for row in cursor.fetchall()]
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    now = datetime.now()
    current_hour = now.hour
    current_minute = now.minute
    
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_hour:02d}:{current_minute:02d}")
    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}")

    for user_id in user_ids:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            day_end_time = get_day_end_time(user_id)
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è = {day_end_time}")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
            try:
                end_hour, end_minute = map(int, day_end_time.split(':'))
            except (ValueError, AttributeError):
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                end_hour, end_minute = 0, 0
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 00:00")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 5 –º–∏–Ω—É—Ç
            time_diff_minutes = abs((current_hour * 60 + current_minute) - (end_hour * 60 + end_minute))
            logger.debug(f"–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {time_diff_minutes} –º–∏–Ω—É—Ç")
            
            if time_diff_minutes > 5:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –≤—Ä–µ–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                continue
            
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è)
            current_day = get_current_day(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏–µ–º
            update_daily_intake_for_user(user_id, current_day)
            
            norm = get_user_data(user_id)
            if not norm:
                logger.debug(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–æ—Ä–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                continue
            norm_calories, norm_protein, norm_fat, norm_carbs = norm

            intake = get_daily_intake(user_id)
            intake_calories, intake_protein, intake_fat, intake_carbs = intake

            percentage = (intake_calories / norm_calories) * 100 if norm_calories > 0 else 0

            html_message = (
                f"üìÖ {current_day}\n\n"
                f"<b>–ò—Ç–æ–≥–∏ –¥–Ω—è:</b>\n"
                f"<b>–ö–∞–ª–æ—Ä–∏–∏:</b> {intake_calories:.0f} / {norm_calories:.0f} –∫–∫–∞–ª ({percentage:.1f}%)\n"
                f"<b>–ë–µ–ª–∫–∏:</b> {intake_protein:.1f} / {norm_protein:.1f}–≥\n"
                f"<b>–ñ–∏—Ä—ã:</b> {intake_fat:.1f} / {norm_fat:.1f}–≥\n"
                f"<b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {intake_carbs:.1f} / {norm_carbs:.1f}–≥\n\n"
                f"–î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω –≤ {day_end_time}, –≤–∞—à –∏—Ç–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω."
            )
            await context.bot.send_message(
                chat_id=user_id,
                text=html_message,
                parse_mode="HTML"
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏—Ç–æ–≥–∏ –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞ –¥–∞—Ç—É {current_day}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_daily_summary_now(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = update.message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_day = get_current_day(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏–µ–º
        update_daily_intake_for_user(user_id, current_day)
        
        norm = get_user_data(user_id)
        if not norm:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞—à–µ–π –Ω–æ—Ä–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.")
            return
        
        norm_calories, norm_protein, norm_fat, norm_carbs = norm
        
        intake = get_daily_intake(user_id)
        intake_calories, intake_protein, intake_fat, intake_carbs = intake
        
        percentage = (intake_calories / norm_calories) * 100 if norm_calories > 0 else 0
        
        day_end_time = get_day_end_time(user_id)
        
        html_message = (
            f"üìÖ {current_day}\n\n"
            f"<b>–ò—Ç–æ–≥–∏ –¥–Ω—è:</b>\n"
            f"<b>–ö–∞–ª–æ—Ä–∏–∏:</b> {intake_calories:.0f} / {norm_calories:.0f} –∫–∫–∞–ª ({percentage:.1f}%)\n"
            f"<b>–ë–µ–ª–∫–∏:</b> {intake_protein:.1f} / {norm_protein:.1f}–≥\n"
            f"<b>–ñ–∏—Ä—ã:</b> {intake_fat:.1f} / {norm_fat:.1f}–≥\n"
            f"<b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {intake_carbs:.1f} / {norm_carbs:.1f}–≥\n\n"
            f"–î–µ–Ω—å –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –≤ {day_end_time}."
        )
        
        await update.message.reply_text(
            html_message,
            parse_mode="HTML"
        )
        
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏—Ç–æ–≥–∏ –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞ –¥–∞—Ç—É {current_day} (—Ä—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è: {e}")

async def schedule_daily_summary_for_user(user_id, context):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏—Ç–æ–≥–æ–≤ –¥–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        day_end_time = get_day_end_time(user_id)
        logger.debug(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ {day_end_time}")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
        try:
            end_hour, end_minute = map(int, day_end_time.split(':'))
        except (ValueError, AttributeError):
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            end_hour, end_minute = 0, 0
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–Ω—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 00:00")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        summary_time = time(hour=end_hour, minute=end_minute)
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for job in context.job_queue.get_jobs_by_name(f"summary_{user_id}"):
            job.schedule_removal()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        context.job_queue.run_daily(
            send_daily_summary_for_user,
            summary_time,
            days=(0, 1, 2, 3, 4, 5, 6),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            chat_id=user_id,
            name=f"summary_{user_id}",
            data=user_id
        )
        
        logger.debug(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ {day_end_time}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def send_daily_summary_for_user(context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–∏ –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    job = context.job
    user_id = job.data
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        current_day = get_current_day(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –∑–∞ –¥–µ–Ω—å
        intake_calories, intake_protein, intake_fat, intake_carbs = get_daily_intake(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        norm_calories, norm_protein, norm_fat, norm_carbs = get_user_data(user_id)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –Ω–æ—Ä–º—ã
        percentage = (intake_calories / norm_calories) * 100 if norm_calories > 0 else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        html_message = f"<b>–ò—Ç–æ–≥–∏ –¥–Ω—è ({current_day}):</b>\n\n"
        html_message += f"–ö–∞–ª–æ—Ä–∏–∏: {intake_calories:.0f} / {norm_calories:.0f} –∫–∫–∞–ª ({percentage:.0f}%)\n"
        html_message += f"–ë–µ–ª–∫–∏: {intake_protein:.1f} / {norm_protein:.1f} –≥\n"
        html_message += f"–ñ–∏—Ä—ã: {intake_fat:.1f} / {norm_fat:.1f} –≥\n"
        html_message += f"–£–≥–ª–µ–≤–æ–¥—ã: {intake_carbs:.1f} / {norm_carbs:.1f} –≥\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        food_log = get_food_log_for_date(user_id, current_day)
        if food_log:
            html_message += "\n<b>–°—ä–µ–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            for item in food_log:
                food_name = item[1]
                weight = item[2]
                calories = item[3]
                html_message += f"‚Ä¢ {food_name} - {weight}–≥ ({calories:.0f} –∫–∫–∞–ª)\n"
        
        await context.bot.send_message(
            chat_id=user_id,
            text=html_message,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")