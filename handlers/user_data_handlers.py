import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from config import GENDER, AGE, WEIGHT, HEIGHT, ACTIVITY, GOAL, TIMEZONE, ACTIVITY_COEFFS, MACRO_RATIOS
from calculations import calculate_bmr, calculate_tdee, adjust_calories, calculate_macros
from database import save_user_data, save_user_profile, set_user_timezone
from handlers.menu_handlers import start
from datetime import datetime

logger = logging.getLogger(__name__)

async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    logger.debug(f"–í—ã–±—Ä–∞–Ω –ø–æ–ª: {query.data}")
    context.user_data["gender"] = query.data
    logger.debug(f"–ü–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ context.user_data: {context.user_data['gender']}")
    
    try:
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return AGE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
            logger.debug("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return AGE
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
            return GENDER

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        age = int(update.message.text)
        if 10 <= age <= 120:
            context.user_data["age"] = age
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥):")
            return WEIGHT
        else:
            await update.message.reply_text("–£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 10 –¥–æ 120 –ª–µ—Ç.")
            return AGE
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        return AGE

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        weight = float(update.message.text)
        if 20 <= weight <= 300:
            context.user_data["weight"] = weight
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (—Å–º):")
            return HEIGHT
        else:
            await update.message.reply_text("–£–∫–∞–∂–∏ –≤–µ—Å –æ—Ç 20 –¥–æ 300 –∫–≥.")
            return WEIGHT
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å?")
        return WEIGHT

async def height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        height = float(update.message.text)
        if 100 <= height <= 250:
            context.user_data["height"] = height
            keyboard = [
                [InlineKeyboardButton("ü™ë –°–∏–¥—è—á–∏–π", callback_data="–°–∏–¥—è—á–∏–π")],
                [InlineKeyboardButton("üö∂‚Äç‚ôÇÔ∏è –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")],
                [InlineKeyboardButton("üèÉ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")],
                [InlineKeyboardButton("üèãÔ∏è –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")],
                [InlineKeyboardButton("üî• –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")]
            ]
            await update.message.reply_text(
                "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?\n"
                "ü™ë **–°–∏–¥—è—á–∏–π** ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –º–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è.\n"
                "üö∂‚Äç‚ôÇÔ∏è **–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** ‚Äî —Ä–µ–¥–∫–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏, 1‚Äì2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é.\n"
                "üèÉ **–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3‚Äì5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –ø–æ–¥–≤–∏–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞.\n"
                "üèãÔ∏è **–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** ‚Äî —Ç—è–∂–µ–ª—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6‚Äì7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥.\n"
                "üî• **–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** ‚Äî —Å–ø–æ—Ä—Ç –Ω–∞ –ø—Ä–æ—Ñ—É—Ä–æ–≤–Ω–µ, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
            return ACTIVITY
        else:
            await update.message.reply_text("–£–∫–∞–∂–∏ —Ä–æ—Å—Ç –æ—Ç 100 –¥–æ 250 —Å–º.")
            return HEIGHT
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç?")
        return HEIGHT

async def activity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data in ACTIVITY_COEFFS:
        context.user_data["activity"] = query.data
        keyboard = [
            [InlineKeyboardButton("‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", callback_data="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞")],
            [InlineKeyboardButton("üî• –°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ (–¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π)", callback_data="–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞")],
            [InlineKeyboardButton("üçΩ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã (–ø—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π)", callback_data="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã")]
        ]
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return GOAL
    return ACTIVITY

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    logger.debug(f"–í—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å: {query.data}")
    
    if query.data in MACRO_RATIOS:
        context.user_data["goal"] = query.data
        logger.debug(f"–¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ context.user_data: {context.user_data['goal']}")
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ UTC
        now_utc = datetime.utcnow()
        current_hour_utc = now_utc.hour
        current_minute = now_utc.minute
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        time_to_tz = {}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        for tz_offset in range(-12, 15):
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤ —ç—Ç–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
            tz_hour = (current_hour_utc + tz_offset) % 24
            time_str = f"{tz_hour:02d}:{current_minute:02d}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
            if time_str in time_to_tz:
                time_to_tz[time_str].append(tz_offset)
            else:
                time_to_tz[time_str] = [tz_offset]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        row = []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –ª–æ–≥–∏—á–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        sorted_times = sorted(time_to_tz.keys(), key=lambda x: int(x.split(':')[0]))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        for time_str in sorted_times:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            tz_offset = time_to_tz[time_str][0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â–∏–π —Ä—è–¥ (—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –±–µ–∑ UTC)
            row.append(InlineKeyboardButton(time_str, callback_data=str(tz_offset)))
            
            # –ï—Å–ª–∏ –≤ —Ä—è–¥—É —É–∂–µ 3 –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if len(row) == 3:
                keyboard.append(row)
                row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if row:
            keyboard.append(row)
        
        try:
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:",
                reply_markup=reply_markup
            )
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            logger.debug("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é TIMEZONE")
            return TIMEZONE
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            try:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                logger.debug("–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return TIMEZONE
            except Exception as e2:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏: {e2}")
                return ConversationHandler.END
    
    logger.debug(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–ª—å: {query.data}, –æ—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GOAL")
    return GOAL

async def timezone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        timezone = int(query.data)
        context.user_data["timezone"] = timezone
        
        user_id = query.from_user.id
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ—Ä–º—ã –ø–∏—Ç–∞–Ω–∏—è
        bmr = calculate_bmr(context.user_data["gender"], context.user_data["weight"],
                            context.user_data["height"], context.user_data["age"])
        tdee = calculate_tdee(bmr, context.user_data["activity"])
        daily_calories = adjust_calories(tdee, context.user_data["goal"])
        protein, fat, carbs = calculate_macros(daily_calories, context.user_data["goal"])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_user_profile(
            user_id, 
            context.user_data["gender"], 
            context.user_data["age"], 
            context.user_data["weight"], 
            context.user_data["height"], 
            context.user_data["activity"], 
            context.user_data["goal"], 
            daily_calories, 
            protein, 
            fat, 
            carbs,
            timezone=timezone
        )
        
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ–º save_user_data
        save_user_data(user_id, daily_calories, protein, fat, carbs)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        set_user_timezone(user_id, timezone)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
        context.user_data['filling_profile'] = False
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        html_message = (
            f"<b>–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞:</b>\n\n"
            f"<b>–ö–∞–ª–æ—Ä–∏–∏:</b> {daily_calories:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
            f"<b>–ë–µ–ª–∫–∏:</b> {protein:.1f} –≥/–¥–µ–Ω—å\n"
            f"<b>–ñ–∏—Ä—ã:</b> {fat:.1f} –≥/–¥–µ–Ω—å\n"
            f"<b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {carbs:.1f} –≥/–¥–µ–Ω—å\n"
        )
        from handlers.utils import get_main_menu
        await query.edit_message_text(
            html_message,
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        return ConversationHandler.END
    except ValueError as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–Ω–æ–≤–∞:",
            reply_markup=query.message.reply_markup
        )
        return TIMEZONE

async def update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç!üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Nutro ‚Äî —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ –ø–∏—Ç–∞–Ω–∏—é —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.\n\n"
        "–ó–∞–ø–æ–ª–Ω–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É, –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω. –≠—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã! üöÄ"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É
    context.user_data['filling_profile'] = True
    
    keyboard = [
        [InlineKeyboardButton("–ü–∞—Ä–µ–Ω—å", callback_data="–ü–∞—Ä–µ–Ω—å"), InlineKeyboardButton("–î–µ–≤—É—à–∫–∞", callback_data="–î–µ–≤—É—à–∫–∞")]
    ]
    if update.message:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(welcome_message)
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif update.callback_query:
        query = update.callback_query
        try:
            await query.answer()
            # –î–ª—è callback_query —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    return GENDER