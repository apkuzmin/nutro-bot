from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import get_food_log, update_food_log, delete_food_log, get_product_data, get_daily_intake, get_current_day
from config import EDIT_FOOD_WEIGHT
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

async def show_food_log(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if update.callback_query:
            query = update.callback_query
            user_id = query.from_user.id
            reply_func = query.edit_message_text
            
            # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–ª–∞–≥–∏–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            try:
                await query.answer()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ callback_data –¥–∞—Ç—É
            if query.data.startswith("log_date_"):
                log_date = query.data.split("_")[2]
                logger.debug(f"Showing food log for date: {log_date}")
            else:
                log_date = None
        elif update.message:
            user_id = update.message.from_user.id
            reply_func = update.message.reply_text
            log_date = None
        else:
            return

        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        if log_date is None:
            log_date = get_current_day(user_id)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        try:
            date_obj = datetime.fromisoformat(log_date)
            formatted_date = date_obj.strftime("%d %B")  # –ù–∞–ø—Ä–∏–º–µ—Ä, "10 –ú–∞—Ä—Ç–∞"
            prev_date = (date_obj - timedelta(days=1)).isoformat()[:10]
            next_date = (date_obj + timedelta(days=1)).isoformat()[:10]
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã {log_date}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
            current_day = get_current_day(user_id)
            date_obj = datetime.fromisoformat(current_day)
            formatted_date = date_obj.strftime("%d %B")
            prev_date = (date_obj - timedelta(days=1)).isoformat()[:10]
            next_date = (date_obj + timedelta(days=1)).isoformat()[:10]

        logger.debug(f"Showing food log for user: {user_id}, date: {log_date}")
        food_log = get_food_log(user_id, log_date)
        logger.debug(f"Food log entries: {len(food_log)}")
        
        if not food_log:
            html_message = f"<b>üçΩ –ò—Å—Ç–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è –∑–∞ {formatted_date}:</b>\n\n–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
        else:
            html_message = f"<b>üçΩ –ò—Å—Ç–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è –∑–∞ {formatted_date}:</b>\n\n"
            edited_log_id = context.user_data.get("edit_log_id")
            old_weight = context.user_data.get("old_weight")
            
            for log in food_log:
                log_id = log["id"]
                food_name = log["food_name"]
                weight = log["weight"]
                kcal = log["kcal"]
                protein = log["protein"]
                fat = log["fat"]
                carbs = log["carbs"]
                timestamp = log["timestamp"]
                edit_code = log["edit_code"]
                
                if "T" in timestamp:
                    time_str = timestamp.split('T')[1][:5]
                else:
                    time_str = "00:00"
                
                if edited_log_id == log_id and old_weight is not None and "just_edited" in context.user_data:
                    html_message += (
                        f"üïõ {time_str} ‚Äî {food_name}, {weight:.0f}–≥ (–±—ã–ª–æ {old_weight:.0f}–≥)\n"
                        f"‚ö°Ô∏è {kcal:.0f} –∫–∫–∞–ª ({protein:.1f}–ë / {fat:.1f}–ñ / {carbs:.1f}–£)\n"
                        f"/edit_{edit_code}\n\n"
                    )
                else:
                    html_message += (
                        f"üïõ {time_str} ‚Äî {food_name}, {weight:.0f}–≥\n"
                        f"‚ö°Ô∏è {kcal:.0f} –∫–∫–∞–ª ({protein:.1f}–ë / {fat:.1f}–ñ / {carbs:.1f}–£)\n"
                        f"/edit_{edit_code}\n\n"
                    )
            
            if "just_edited" in context.user_data:
                del context.user_data["just_edited"]

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –¥–Ω—è–º–∏
        prev_date_obj = datetime.fromisoformat(prev_date)
        next_date_obj = datetime.fromisoformat(next_date)
        
        prev_formatted = prev_date_obj.strftime("%d %B")
        next_formatted = next_date_obj.strftime("%d %B")
        
        keyboard = [
            [
                InlineKeyboardButton(f"‚óÄÔ∏è {prev_formatted}", callback_data=f"log_date_{prev_date}"),
                InlineKeyboardButton(f"{next_formatted} ‚ñ∂Ô∏è", callback_data=f"log_date_{next_date}")
            ],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home")]
        ]
        
        try:
            await reply_func(
                html_message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
            if update.callback_query:
                try:
                    await update.callback_query.message.reply_text(
                        html_message,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode="HTML"
                    )
                except Exception as e2:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ show_food_log: {e}")
        if update.callback_query:
            try:
                await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except:
                pass

async def edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    logger.debug(f"Edit menu triggered for user {user_id} with command: {update.message.text}")
    try:
        edit_code = update.message.text.split('_')[1]
        logger.debug(f"Extracted edit_code: {edit_code}")
    except IndexError:
        logger.debug("Failed to extract edit_code: IndexError")
        from handlers.utils import get_main_menu
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.", reply_markup=get_main_menu())
        return ConversationHandler.END

    food_log = get_food_log(user_id)
    logger.debug(f"Food log for user {user_id}: {food_log}")
    log_entry = next((entry for entry in food_log if entry["edit_code"] == edit_code), None)
    if not log_entry:
        logger.debug(f"No log entry found for edit_code: {edit_code}")
        from handlers.utils import get_main_menu
        await update.message.reply_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu())
        return ConversationHandler.END

    log_id = log_entry["id"]
    food_name = log_entry["food_name"]
    weight = log_entry["weight"]
    kcal = log_entry["kcal"]
    protein = log_entry["protein"]
    fat = log_entry["fat"]
    carbs = log_entry["carbs"]
    timestamp = log_entry["timestamp"]
    
    logger.debug(f"Found log entry: {food_name}, log_id: {log_id}")
    context.user_data["edit_log_id"] = log_id
    context.user_data["old_weight"] = weight
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ timestamp
    if "T" in timestamp:
        time_str = timestamp.split('T')[1][:5]
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç timestamp –∏–∑–º–µ–Ω–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        time_str = "00:00"
        
    html_message = (
        f"<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
        f"{food_name} {weight:.0f}–≥ ‚Äî {kcal:.0f} –∫–∫–∞–ª ({protein:.1f}–ë / {fat:.1f}–ñ / {carbs:.1f}–£)\n"
        f"–í—Ä–µ–º—è: {time_str}"
    )
    keyboard = [
        [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å", callback_data=f"edit_weight_{log_id}"),
         InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{log_id}")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="food_log")]
    ]
    await update.message.reply_text(
        html_message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )
    return ConversationHandler.END

async def edit_food_weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        new_weight = float(update.message.text)
        log_id = context.user_data["edit_log_id"]
        user_id = update.message.from_user.id

        food_log = get_food_log(user_id)
        log_entry = next((entry for entry in food_log if entry["id"] == log_id), None)
        if not log_entry:
            from handlers.utils import get_main_menu
            await update.message.reply_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu())
            return ConversationHandler.END

        old_weight = log_entry["weight"]
        update_food_log(log_id, new_weight)

        context.user_data["old_weight"] = old_weight
        context.user_data["just_edited"] = True

        await show_food_log(update, context)

        if "old_weight" in context.user_data:
            del context.user_data["old_weight"]
        if "edit_log_id" in context.user_data:
            del context.user_data["edit_log_id"]

        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ –≥?")
        return EDIT_FOOD_WEIGHT